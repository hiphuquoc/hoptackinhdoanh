<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Str;

class CleanUnusedMigrations extends Command
{
    protected $signature = 'migration:clean-unused {--dry-run : Ch·ªâ hi·ªÉn th·ªã nh·ªØng g√¨ s·∫Ω xo√° m√† kh√¥ng th·ª±c hi·ªán}';
    protected $description = 'Xo√° c√°c migration ƒë√£ ghi trong DB nh∆∞ng kh√¥ng c√≤n file t∆∞∆°ng ·ª©ng, xo√° b·∫£ng v√† model n·∫øu c√≥ th·ªÉ';

    public function handle()
    {
        $this->info('üîç ƒêang ki·ªÉm tra c√°c migration kh√¥ng c√≤n file...');

        // L·∫•y danh s√°ch file migration hi·ªán t·∫°i
        $migrationFiles = collect(File::files(database_path('migrations')))
            ->map(fn($file) => pathinfo($file, PATHINFO_FILENAME))
            ->toArray();

        // L·∫•y danh s√°ch migration trong DB
        $migrationInDb = DB::table('migrations')->pluck('migration')->toArray();

        // T√¨m migration kh√¥ng c√≤n file
        $missingMigrations = array_diff($migrationInDb, $migrationFiles);

        if (empty($missingMigrations)) {
            $this->info('‚úÖ Kh√¥ng c√≥ migration n√†o c·∫ßn xo√°.');
            return 0;
        }

        $isDryRun = $this->option('dry-run');

        $this->warn('‚ùå C√°c migration kh√¥ng c√≤n file:');
        foreach ($missingMigrations as $migration) {
            $this->line("- $migration");

            // T√¨m b·∫£ng t∆∞∆°ng ·ª©ng n·∫øu t√™n migration l√† create_xxx_table
            if (preg_match('/create_(.*)_table/', $migration, $matches)) {
                $table = $matches[1];

                // D·ª± ƒëo√°n t√™n model t·ª´ t√™n b·∫£ng
                $modelName = Str::studly(Str::singular($table));
                $modelPath = app_path("Models/{$modelName}.php");

                if (!$isDryRun) {
                    // Xo√° b·∫£ng
                    if (Schema::hasTable($table)) {
                        Schema::drop($table);
                        $this->warn("  ‚Üí ƒê√£ xo√° b·∫£ng `$table`");
                    } else {
                        $this->line("  ‚Üí B·∫£ng `$table` kh√¥ng t·ªìn t·∫°i");
                    }

                    // Xo√° model
                    if (File::exists($modelPath)) {
                        File::delete($modelPath);
                        $this->warn("  ‚Üí ƒê√£ xo√° model `$modelName` t·∫°i Models/");
                    } else {
                        $this->line("  ‚Üí Model `$modelName` kh√¥ng t·ªìn t·∫°i");
                    }
                } else {
                    $this->line("  ‚Üí (dry-run) S·∫Ω xo√° b·∫£ng `$table` n·∫øu t·ªìn t·∫°i");
                    $this->line("  ‚Üí (dry-run) S·∫Ω xo√° model `$modelName` n·∫øu t·ªìn t·∫°i t·∫°i Models/");
                }
            }
        }

        if (!$isDryRun) {
            // Xo√° b·∫£n ghi trong b·∫£ng migrations
            DB::table('migrations')->whereIn('migration', $missingMigrations)->delete();
            $this->info("üßπ ƒê√£ xo√° " . count($missingMigrations) . " b·∫£n ghi kh·ªèi b·∫£ng `migrations`.");
        } else {
            $this->info("‚úÖ (dry-run) Ho√†n t·∫•t. Kh√¥ng c√≥ g√¨ b·ªã xo√°.");
        }

        return 0;
    }
}
